initSidebarItems({"attr":[["ewasm_fn","The macro helps you to build your handler in the contract, and also generate the function signature, you can use `fn_sig!` macro to get your function signature of the function wrappered with `#[ewasm_fn]`"],["ewasm_lib_fn","The macro helps you to build your handler as a lib, which can used in the contract, the function signature well automatically generated as `{FUNCTION_NAME}_SIG`"],["ewasm_main","`ewasm_main` is a macro for the main function of the contract There are three different contract output."],["ewasm_test",""]],"derive":[["Key","`Key` derive help you implement Key trait for the kv feature"],["Value","`Value` derive help you implement Value trait for kv feature"]],"macro":[["ewasm_assert_eq",""],["ewasm_assert_ok","This macro helps you asser your handler without error and returns"],["ewasm_assert_rusty_ok","This macro helps you assert return Ok(()) your handler with rusty ewasm_main, namely `#[ewasm_main(rusty)]`"],["ewasm_err_output","The macro helps you to get the binary result of the thiserror, such that you can assert your handler with error. for example: `ewasm_assert_eq!(some_handler(), ewasm_err_output!(Error::SomeError))`"],["ewasm_rusty_err_output","This macro helps you assert return Err your handler with rusty ewasm_main, namely `#[ewasm_main(rusty)]` you should pass the complete Result type, as the following example `ewasm_rusty_err_output!(Err(\"NotTrustedInput\") as Result<(), &'static str>)` such that you can easy to use any kind of rust error as you like"],["fn_sig","`fn_sig` helps you get you function signature"],["input_from","`input_from` will help you to get the input data from contract caller, and automatically deserialize input into handler `input_from!(contract, the_name_of_the_handler)` Besides, you can map the error to your customized error when something wrong happened in `input_from!`, for example: `input_from!(contract, check_input_object, |_| Err(\"DeserdeError\"))`"]]});